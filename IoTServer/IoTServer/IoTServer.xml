<?xml version="1.0"?>
<doc>
    <assembly>
        <name>IoTServer</name>
    </assembly>
    <members>
        <member name="M:IoTServer.Common.DataPersist.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="prefix">前缀</param> 
        </member>
        <member name="M:IoTServer.Common.DataPersist.Read(System.String)">
            <summary>
            读
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:IoTServer.Common.DataPersist.Write(System.String,System.String)">
            <summary>
            写
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:IoTServer.Common.DataPersist.Clear">
            <summary>
            清空
            </summary>
        </member>
        <member name="M:IoTServer.Common.DataPersist.SaveData">
            <summary>
            保存数据
            </summary>
        </member>
        <member name="M:IoTServer.Common.DataPersist.LoadData">
            <summary>
            初始化加载数据
            </summary>
        </member>
        <member name="M:IoTServer.Servers.BACnet.BACnetServer.Start(System.String)">
            <summary>
            启动服务
            </summary>
        </member>
        <member name="M:IoTServer.Servers.BACnet.BACnetServer.Stop">
            <summary>
            停止服务
            </summary>
        </member>
        <member name="T:IoTServer.Servers.Modbus.ModbusAsciiServer">
            <summary>
            ModbusAscii 服务端模拟
            </summary>
        </member>
        <member name="M:IoTServer.Servers.Modbus.ModbusAsciiServer.Start">
            <summary>
            启动服务
            </summary>
        </member>
        <member name="M:IoTServer.Servers.Modbus.ModbusAsciiServer.Stop">
            <summary>
            停止服务
            </summary>
        </member>
        <member name="M:IoTServer.Servers.Modbus.ModbusAsciiServer.DataReceived(System.Object,System.IO.Ports.SerialDataReceivedEventArgs)">
            <summary>
            接收数据回调用
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:IoTServer.Servers.Modbus.ModbusRtuServer">
            <summary>
            ModbusRtu 服务端模拟
            </summary>
        </member>
        <member name="M:IoTServer.Servers.Modbus.ModbusRtuServer.Start">
            <summary>
            启动服务
            </summary>
        </member>
        <member name="M:IoTServer.Servers.Modbus.ModbusRtuServer.Stop">
            <summary>
            停止服务
            </summary>
        </member>
        <member name="M:IoTServer.Servers.Modbus.ModbusRtuServer.DataReceived(System.Object,System.IO.Ports.SerialDataReceivedEventArgs)">
            <summary>
            接收数据回调用
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:IoTServer.Servers.Modbus.ModbusTcpServer">
            <summary>
            ModbusTcp 服务端模拟
            </summary>
        </member>
        <member name="M:IoTServer.Servers.Modbus.ModbusTcpServer.Start">
            <summary>
            启动服务
            </summary>
        </member>
        <member name="M:IoTServer.Servers.Modbus.ModbusTcpServer.Stop">
            <summary>
            停止服务
            </summary>
        </member>
        <member name="M:IoTServer.Servers.Modbus.ModbusTcpServer.Accept(System.Net.Sockets.Socket)">
            <summary>
            客户端连接到服务端
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:IoTServer.Servers.Modbus.ModbusTcpServer.Receive(System.Net.Sockets.Socket)">
            <summary>
            接收客户端发送的消息
            </summary>
            <param name="newSocket"></param>
        </member>
        <member name="M:IoTServer.Servers.PLC.AllenBradleyServer.#ctor(System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="port"></param>
            <param name="ip"></param>
        </member>
        <member name="M:IoTServer.Servers.PLC.AllenBradleyServer.Start">
            <summary>
            启动服务
            </summary>
        </member>
        <member name="M:IoTServer.Servers.PLC.AllenBradleyServer.Stop">
            <summary>
            停止服务
            </summary>
        </member>
        <member name="M:IoTServer.Servers.PLC.AllenBradleyServer.Accept(System.Net.Sockets.Socket)">
            <summary>
            客户端连接到服务端
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:IoTServer.Servers.PLC.AllenBradleyServer.Receive(System.Net.Sockets.Socket)">
            <summary>
            接收客户端发送的消息
            </summary>
            <param name="newSocket"></param>
        </member>
        <member name="M:IoTServer.Servers.PLC.IIoTServer.Start">
            <summary>
            启动服务
            </summary>
        </member>
        <member name="M:IoTServer.Servers.PLC.IIoTServer.Stop">
            <summary>
            停止服务
            </summary>
        </member>
        <member name="T:IoTServer.Servers.PLC.MitsubishiA1EServer">
            <summary>
            三菱MC A-1E 服务端模拟
            </summary>
        </member>
        <member name="M:IoTServer.Servers.PLC.MitsubishiA1EServer.#ctor(System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="port"></param>
            <param name="ip"></param>
        </member>
        <member name="M:IoTServer.Servers.PLC.MitsubishiA1EServer.Start">
            <summary>
            启动服务
            </summary>
        </member>
        <member name="M:IoTServer.Servers.PLC.MitsubishiA1EServer.Stop">
            <summary>
            停止服务
            </summary>
        </member>
        <member name="M:IoTServer.Servers.PLC.MitsubishiA1EServer.Accept(System.Net.Sockets.Socket)">
            <summary>
            客户端连接到服务端
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:IoTServer.Servers.PLC.MitsubishiA1EServer.Receive(System.Net.Sockets.Socket)">
            <summary>
            接收客户端发送的消息
            </summary>
            <param name="newSocket"></param>
        </member>
        <member name="T:IoTServer.Servers.PLC.MitsubishiQna3EServer">
            <summary>
            三菱MC Qna-3E  服务端模拟
            </summary>
        </member>
        <member name="M:IoTServer.Servers.PLC.MitsubishiQna3EServer.#ctor(System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="port"></param>
            <param name="ip"></param>
        </member>
        <member name="M:IoTServer.Servers.PLC.MitsubishiQna3EServer.Start">
            <summary>
            启动服务
            </summary>
        </member>
        <member name="M:IoTServer.Servers.PLC.MitsubishiQna3EServer.Stop">
            <summary>
            停止服务
            </summary>
        </member>
        <member name="M:IoTServer.Servers.PLC.MitsubishiQna3EServer.Accept(System.Net.Sockets.Socket)">
            <summary>
            客户端连接到服务端
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:IoTServer.Servers.PLC.MitsubishiQna3EServer.Receive(System.Net.Sockets.Socket)">
            <summary>
            接收客户端发送的消息
            </summary>
            <param name="newSocket"></param>
        </member>
        <member name="T:IoTServer.Servers.PLC.OmronFinsServer">
            <summary>
            欧姆龙Fins 服务端模拟
            </summary>
        </member>
        <member name="M:IoTServer.Servers.PLC.OmronFinsServer.#ctor(System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="port"></param>
            <param name="ip"></param>
        </member>
        <member name="M:IoTServer.Servers.PLC.OmronFinsServer.Start">
            <summary>
            启动服务
            </summary>
        </member>
        <member name="M:IoTServer.Servers.PLC.OmronFinsServer.Stop">
            <summary>
            停止服务
            </summary>
        </member>
        <member name="M:IoTServer.Servers.PLC.OmronFinsServer.Accept(System.Net.Sockets.Socket)">
            <summary>
            客户端连接到服务端
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:IoTServer.Servers.PLC.OmronFinsServer.Receive(System.Net.Sockets.Socket)">
            <summary>
            接收客户端发送的消息
            </summary>
            <param name="newSocket"></param>
        </member>
        <member name="T:IoTServer.Servers.PLC.SiemensServer">
            <summary>
            西门子PLC 服务端模拟
            </summary>
        </member>
        <member name="M:IoTServer.Servers.PLC.SiemensServer.Start">
            <summary>
            启动服务
            </summary>
        </member>
        <member name="M:IoTServer.Servers.PLC.SiemensServer.Stop">
            <summary>
            停止服务
            </summary>
        </member>
        <member name="M:IoTServer.Servers.PLC.SiemensServer.Accept(System.Net.Sockets.Socket)">
            <summary>
            客户端连接到服务端
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:IoTServer.Servers.PLC.SiemensServer.Receive(System.Net.Sockets.Socket)">
            <summary>
            接收客户端发送的消息
            </summary>
            <param name="newSocket"></param>
        </member>
        <member name="T:IoTServer.Servers.ServerSocketBase">
            <summary>
            ServerSocket基类
            </summary>
        </member>
        <member name="F:IoTServer.Servers.ServerSocketBase.BufferSize">
            <summary>
            分批缓冲区大小
            </summary>
        </member>
        <member name="M:IoTServer.Servers.ServerSocketBase.SocketRead(System.Net.Sockets.Socket,System.Int32)">
            <summary>
            读取
            </summary>
            <param name="socket">socket</param>
            <param name="receiveCount">读取长度</param>
            <returns></returns>
        </member>
    </members>
</doc>
